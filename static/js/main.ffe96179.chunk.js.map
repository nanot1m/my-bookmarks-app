{"version":3,"sources":["collection/index.ts","bookmark/index.ts","App.tsx","form/index.tsx","reportWebVitals.ts","index.tsx"],"names":["unique","map","xs","memo","Set","x","has","add","f","fn","createBookmark","name","url","description","tags","id","nanoid","toLowerCase","Array","from","myBookmarks","BookmarkView","bookmark","border","borderColor","borderRadius","px","py","isExternal","href","as","size","mb","tag","Form","props","initialValues","onSubmit","render","handleSubmit","children","Field","input","meta","isRequired","isInvalid","touched","error","label","validateNewBookmarkForm","form","errors","trim","length","console","log","CreateBookmarkPopover","onNewBookmark","useDisclosure","onClose","onOpen","isOpen","initialFocusRef","useRef","placement","isLazy","closeOnBlur","aria-label","icon","Add","returnFocus","persistentFocus","values","split","validate","ref","justifyContent","display","colorScheme","type","customTheme","extendTheme","config","useSystemColorMode","App","useState","bookmarks","setBookmarks","filter","setFilterValue","sorted","useMemo","matchSorter","keys","theme","alignItems","concat","placeholder","value","onChange","e","target","spacing","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ffe96179.chunk.js","sourcesContent":["export function* unique<T>(xs: Iterable<T>): Iterable<T> {\n  const memo = new Set();\n  for (const x of xs) {\n    if (memo.has(x)) {\n      continue;\n    }\n    yield x;\n    memo.add(x);\n  }\n}\n\nexport function* map<T, R>(fn: (x: T) => R, xs: Iterable<T>): Iterable<R> {\n  for (const x of xs) {\n    yield fn(x);\n  }\n}\n\nexport function toArray<T>(xs: Iterable<T>): Array<T> {\n  return Array.from(xs);\n}\n","import { nanoid } from \"nanoid\";\nimport { map, toArray, unique } from \"../collection\";\n\ntype BookmarkId = string & { __type__: \"BookmarkId\" };\nfunction getBookmarkId() {\n  return nanoid() as BookmarkId;\n}\n\nexport type Bookmark = {\n  id: BookmarkId;\n  name: string;\n  url: string;\n  description: string;\n  tags: string[];\n};\n\nexport type CreateBookmarkPayload = {\n  name: string;\n  url: string;\n  description?: string;\n  tags?: string[];\n};\n\nexport function createBookmark({\n  name,\n  url,\n  description = \"\",\n  tags = [],\n}: CreateBookmarkPayload): Bookmark {\n  return {\n    id: getBookmarkId(),\n    url,\n    name,\n    description,\n    tags: toArray(unique(map((x) => x.toLowerCase(), tags))),\n  };\n}\n","import {\n  Box,\n  Button,\n  ChakraProvider,\n  Container,\n  extendTheme,\n  Heading,\n  HStack,\n  IconButton,\n  Input,\n  Link,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverTrigger,\n  Portal,\n  Tag,\n  Text,\n  Textarea,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { matchSorter } from \"match-sorter\";\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Bookmark as BookmarkType, createBookmark } from \"./bookmark\";\nimport { createForm } from \"./form\";\nimport ReactFocusLock from \"react-focus-lock\";\n\nconst myBookmarks = [\n  createBookmark({\n    name: \"google\",\n    url: \"https://www.google.com\",\n    description: \"big search engine\",\n    tags: [\"google\", \"search\"],\n  }),\n  createBookmark({\n    name: \"instagram\",\n    url: \"https://www.instagram.com/\",\n    description: \"share photoes and videos\",\n    tags: [\"photo\", \"video\", \"image\", \"social\", \"media\"],\n  }),\n  createBookmark({\n    name: \"youtube\",\n    url: \"https://www.youtube.com\",\n    tags: [\"google\", \"video\"],\n  }),\n];\n\nfunction BookmarkView({ bookmark }: { bookmark: BookmarkType }) {\n  return (\n    <Box border=\"1px\" borderColor=\"gray.200\" borderRadius={8} px={4} py={2}>\n      <Link isExternal href={bookmark.url}>\n        <Heading as=\"h3\" size=\"m\">\n          {bookmark.name}\n        </Heading>\n      </Link>\n      <Text mb={1}>{bookmark.description}</Text>\n      <HStack>\n        {bookmark.tags.map((tag) => (\n          <Tag key={tag} size=\"sm\">\n            {tag}\n          </Tag>\n        ))}\n      </HStack>\n    </Box>\n  );\n}\n\ntype CreateBookmarkFormPayload = {\n  name: string;\n  url: string;\n  description: string;\n  tags: string;\n};\n\nconst { Form, Field } = createForm<CreateBookmarkFormPayload>();\n\nconst validateNewBookmarkForm = (\n  form: CreateBookmarkFormPayload\n): Partial<Record<\"name\" | \"url\" | \"description\" | \"tags\", string>> => {\n  const errors = {} as Partial<Record<keyof typeof form, string>>;\n  if ((form.name?.trim() || \"\").length === 0) {\n    errors.name = \"Name can not be empty\";\n  }\n  if ((form.url?.trim() || \"\").length === 0) {\n    errors.url = \"URL can not be empty\";\n  }\n  console.log(errors);\n  return errors;\n};\n\nfunction CreateBookmarkPopover({\n  onNewBookmark,\n}: {\n  onNewBookmark: (bookmark: BookmarkType) => void;\n}) {\n  const { onClose, onOpen, isOpen } = useDisclosure();\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n  return (\n    <Popover\n      placement=\"auto-start\"\n      isLazy\n      initialFocusRef={initialFocusRef}\n      closeOnBlur={false}\n      onOpen={onOpen}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <PopoverTrigger>\n        <IconButton size=\"sm\" aria-label=\"New bookmakr\" icon={<AddIcon />} />\n      </PopoverTrigger>\n      <Portal>\n        <PopoverContent>\n          <ReactFocusLock returnFocus persistentFocus={false}>\n            <Form\n              onSubmit={(values) => {\n                onNewBookmark(\n                  createBookmark({\n                    name: values.name,\n                    description: values.description,\n                    url: values.url,\n                    tags: values.tags.split(/[\\s,]+/),\n                  })\n                );\n                onClose();\n              }}\n              initialValues={{ description: \"\", name: \"\", tags: \"\", url: \"\" }}\n              validate={validateNewBookmarkForm}\n            >\n              <PopoverArrow />\n              <PopoverHeader>New bookmakr</PopoverHeader>\n              <PopoverCloseButton />\n              <PopoverBody>\n                <VStack>\n                  <Field\n                    name=\"name\"\n                    label=\"Name\"\n                    id=\"bookmark-name\"\n                    isRequired\n                    render={(input) => (\n                      <Input ref={initialFocusRef} {...input} />\n                    )}\n                  />\n                  <Field\n                    name=\"url\"\n                    label=\"URL\"\n                    id=\"bookmark-url\"\n                    isRequired\n                    render={(input) => <Input {...input} />}\n                  />\n                  <Field\n                    name=\"description\"\n                    label=\"Description\"\n                    id=\"bookmark-description\"\n                    render={(input) => <Textarea {...input} />}\n                  />\n                  <Field\n                    name=\"tags\"\n                    label=\"Description\"\n                    id=\"bookmark-tags\"\n                    render={(input) => <Textarea {...input} />}\n                  />\n                </VStack>\n              </PopoverBody>\n              <PopoverFooter justifyContent=\"flex-end\" display=\"flex\">\n                <Button colorScheme=\"blue\" type=\"submit\">\n                  Add\n                </Button>\n              </PopoverFooter>\n            </Form>\n          </ReactFocusLock>\n        </PopoverContent>\n      </Portal>\n    </Popover>\n  );\n}\n\nconst customTheme = extendTheme({\n  config: {\n    useSystemColorMode: true,\n  },\n});\n\nfunction App() {\n  const [bookmarks, setBookmarks] = useState(myBookmarks);\n  const [filter, setFilterValue] = useState(\"\");\n\n  const sorted = useMemo(\n    () =>\n      matchSorter(bookmarks, filter, {\n        keys: [\"name\", \"tags\", \"description\"],\n      }),\n    [filter, bookmarks]\n  );\n\n  return (\n    <ChakraProvider theme={customTheme}>\n      <Container py={8}>\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          mb={12}\n        >\n          <Heading as=\"h1\">My bookmarks.</Heading>\n          <CreateBookmarkPopover\n            onNewBookmark={(bookmark) => {\n              setBookmarks((bookmarks) => bookmarks.concat(bookmark));\n            }}\n          />\n        </Box>\n        <Input\n          placeholder=\"Search\"\n          value={filter}\n          onChange={(e) => setFilterValue(e.target.value)}\n          mb={8}\n        />\n        <VStack spacing={4} align=\"stretch\">\n          {sorted.map((bookmark) => (\n            <BookmarkView key={bookmark.id} bookmark={bookmark} />\n          ))}\n        </VStack>\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { Form as FinalForm, Field as FinalField } from \"react-final-form\";\nimport React, { ReactNode } from \"react\";\nimport {\n  FormControl,\n  FormErrorIcon,\n  FormErrorMessage,\n  FormLabel,\n} from \"@chakra-ui/react\";\n\nexport interface FormProps<T> {\n  initialValues: T;\n  validate?(values: T): Partial<Record<keyof T, string>>;\n  onSubmit(values: T): void;\n  children: ReactNode;\n}\n\ntype FilterStrings<T> = T extends string ? T : never;\n\nexport interface FieldProps<\n  TValues,\n  TName extends FilterStrings<keyof TValues>,\n  TElement extends HTMLElement\n> {\n  name: TName;\n  isRequired?: boolean;\n  id?: string;\n  label: string;\n  render(input: FieldInputProps<TValues[TName], TElement>): ReactNode;\n}\n\ninterface FieldInputProps<FieldValue, T extends HTMLElement> {\n  name: string;\n  onBlur: (event?: React.FocusEvent<T>) => void;\n  onChange: (event: React.ChangeEvent<T> | any) => void;\n  onFocus: (event?: React.FocusEvent<T>) => void;\n  type?: string;\n  value: FieldValue;\n  checked?: boolean;\n  multiple?: boolean;\n}\n\nexport function createForm<T>() {\n  function Form(props: FormProps<T>) {\n    return (\n      <FinalForm<T>\n        initialValues={props.initialValues}\n        onSubmit={props.onSubmit}\n        render={({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>{props.children}</form>\n        )}\n      />\n    );\n  }\n\n  function Field<\n    TName extends FilterStrings<keyof T>,\n    TElement extends HTMLElement = HTMLElement\n  >(props: FieldProps<T, TName, TElement>) {\n    return (\n      <FinalField<T[typeof props[\"name\"]]>\n        name={props.name}\n        render={({ input, meta }) => (\n          <FormControl\n            id={props.id}\n            isRequired={props.isRequired}\n            isInvalid={meta.touched && meta.error}\n          >\n            <FormLabel>{props.label}</FormLabel>\n            {props.render(input)}\n            <FormErrorMessage>\n              <FormErrorIcon /> {meta.error}\n            </FormErrorMessage>\n          </FormControl>\n        )}\n      />\n    );\n  }\n\n  return { Form, Field };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ColorModeScript } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}