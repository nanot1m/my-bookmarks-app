{"version":3,"sources":["collection/index.ts","bookmark/index.ts","IconButton.tsx","BookmarkForm.tsx","form/index.tsx","BookmarkView.tsx","storage/index.ts","storage/file-system-storage.ts","App.tsx","reportWebVitals.ts","storage/local-storage.ts","index.tsx"],"names":["unique","map","xs","memo","Set","x","has","add","f","fn","processUrl","url","split","length","processTags","tags","toLowerCase","Array","from","createBookmark","name","description","date","Date","toISOString","id","nanoid","createdAt","updatedAt","IconButton","props","label","title","placement","aria-label","icon","onClick","Form","initialValues","onSubmit","validate","render","handleSubmit","children","Field","input","meta","isRequired","isInvalid","touched","error","validateNewBookmarkForm","form","errors","trim","BookmarkForm","bookmark","isOpen","onClose","initialFocusRef","useRef","join","values","vals","filter","Boolean","updates","updateBookmark","ref","mr","colorScheme","type","CreateBookmarkButton","onBookmarkCreate","useDisclosure","onOpen","Add","EditBookmarkButton","onBookmarkUpdate","Edit","Favicon","useState","ready","setReady","image","Image","useEffect","cancelled","current","src","onload","background","width","height","rounded","display","justifyContent","alignItems","boxSize","alt","transition","opacity","Number","BookmarkView","uri","onBookmarkDelete","faviconUrl","useMemo","URL","origin","ex","border","borderColor","borderRadius","px","py","justify","isExternal","href","as","size","ml","mb","spacing","tag","Delete","getInitialState","version","bookmarks","UPGRADES","0","state","forEach","upgradeState","IDB_FILE_HANDLE_KEY","saveFileHandle","handle","a","idbSet","restoreFileHandle","idbGet","saveToFile","blob","Blob","JSON","stringify","fileSave","fileName","extensions","fileHandle","loadFromFile","fileOpen","text","parse","appReducer","action","concat","payload","updatedBookmarkIndex","findIndex","b","updatedBookmarks","slice","App","storageProvider","initialState","initialFileHandle","onStateChange","useReducer","dispatch","setFilterValue","setFileHandle","autoSaveIsEnabled","setAutoSaveEnabled","toast","useToast","setTimeout","clearTimeout","catch","code","DOMException","ABORT_ERR","message","status","isClosable","sortedBookmarks","matchSorter","sort","keys","file","result","duration","AiFillFileAdd","AiFillFileText","AiOutlineDownload","in","animateOpacity","pb","checked","onChange","e","target","placeholder","value","mt","textAlign","color","align","GoMarkGithub","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LS_KEY","localStorageProvider","getState","strState","localStorage","getItem","setState","setItem","storageManager","stateFromStorage","upgradedState","Promise","all","restoreAppState","customTheme","extendTheme","config","useSystemColorMode","ReactDOM","theme","document","getElementById","window","setTestBookmarks","myBookmarks","location","reload"],"mappings":"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","file":"static/js/main.4a4af593.chunk.js","sourcesContent":["export function* unique<T>(xs: Iterable<T>): Iterable<T> {\n  const memo = new Set();\n  for (const x of xs) {\n    if (memo.has(x)) {\n      continue;\n    }\n    yield x;\n    memo.add(x);\n  }\n}\n\nexport function* map<T, R>(fn: (x: T) => R, xs: Iterable<T>): Iterable<R> {\n  for (const x of xs) {\n    yield fn(x);\n  }\n}\n\nexport function toArray<T>(xs: Iterable<T>): Array<T> {\n  return Array.from(xs);\n}\n","import { nanoid } from \"nanoid\";\n\nimport { map, toArray, unique } from \"../collection\";\n\nexport type BookmarkId = string & { __type__: \"BookmarkId\" };\nfunction getBookmarkId() {\n  return nanoid() as BookmarkId;\n}\n\nexport type BookmarkType = {\n  id: BookmarkId;\n  name: string;\n  url: string;\n  description: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateBookmarkPayload = {\n  name: string;\n  url: string;\n  description?: string;\n  tags?: string[];\n};\n\nfunction processUrl(url: string) {\n  const split = url.split(\"//\");\n  if (split.length === 1) {\n    return `https://${url}`;\n  }\n  return url;\n}\n\nfunction processTags(tags: string[]): string[] {\n  return toArray(unique(map((x) => x.toLowerCase(), tags)));\n}\n\nexport function createBookmark({\n  name,\n  url,\n  description = \"\",\n  tags = [],\n}: CreateBookmarkPayload): BookmarkType {\n  const date = new Date().toISOString();\n  return {\n    id: getBookmarkId(),\n    url: processUrl(url),\n    name,\n    description,\n    tags: processTags(tags),\n    createdAt: date,\n    updatedAt: date,\n  };\n}\n\nexport function updateBookmark(\n  bookmark: BookmarkType,\n  updates: Omit<Partial<BookmarkType>, \"id\" | \"createdAt\" | \"updatedAt\">\n): BookmarkType {\n  return {\n    ...bookmark,\n    ...updates,\n    url: processUrl(updates.url ?? bookmark.url),\n    tags: processTags(updates.tags ?? bookmark.tags),\n    updatedAt: new Date().toISOString(),\n  };\n}\n","import { IconButton as ChakraIconButton, Tooltip } from \"@chakra-ui/react\";\nimport { MouseEventHandler, ReactElement, ReactNode } from \"react\";\n\nexport function IconButton(props: {\n  \"aria-label\": string;\n  title?: ReactNode;\n  icon: ReactElement;\n  onClick?: MouseEventHandler;\n}) {\n  return (\n    <Tooltip label={props.title} placement=\"top\">\n      <ChakraIconButton\n        aria-label={props[\"aria-label\"]}\n        icon={props.icon}\n        onClick={props.onClick}\n      />\n    </Tooltip>\n  );\n}\n","import { AddIcon, EditIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Textarea,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useRef } from \"react\";\n\nimport { BookmarkType, createBookmark, updateBookmark } from \"./bookmark\";\nimport { createForm } from \"./form\";\nimport { IconButton } from \"./IconButton\";\n\ntype CreateBookmarkFormPayload = {\n  name: string;\n  url: string;\n  description: string;\n  tags: string;\n};\n\nconst { Form, Field } = createForm<CreateBookmarkFormPayload>();\n\nfunction validateNewBookmarkForm(form: CreateBookmarkFormPayload) {\n  const errors = {} as Partial<Record<keyof typeof form, string>>;\n  if ((form.name?.trim() || \"\").length === 0) {\n    errors.name = \"Name can not be empty\";\n  }\n  if ((form.url?.trim() || \"\").length === 0) {\n    errors.url = \"URL can not be empty\";\n  }\n  return errors;\n}\n\nexport function BookmarkForm({\n  title,\n  bookmark,\n  isOpen,\n  onClose,\n  onSubmit,\n}: {\n  title: string;\n  bookmark?: BookmarkType;\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (bookmark: BookmarkType) => void;\n}) {\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n\n  function handleSubmit(values: CreateBookmarkFormPayload): void {\n    const vals = {\n      name: values.name,\n      description: values.description,\n      url: values.url,\n      tags: values.tags.split(/[\\s,]+/).filter(Boolean),\n    };\n    onSubmit(bookmark ? updateBookmark(bookmark, vals) : createBookmark(vals));\n    onClose();\n  }\n\n  const initialValues = {\n    description: bookmark?.description ?? \"\",\n    name: bookmark?.name ?? \"\",\n    tags: bookmark?.tags.join(\", \") ?? \"\",\n    url: bookmark?.url ?? \"\",\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <Form\n        onSubmit={handleSubmit}\n        initialValues={initialValues}\n        validate={validateNewBookmarkForm}\n      >\n        <ModalContent>\n          <ModalHeader>{title}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack>\n              <Field\n                name=\"name\"\n                label=\"Name\"\n                id=\"bookmark-name\"\n                isRequired\n                render={(input) => <Input ref={initialFocusRef} {...input} />}\n              />\n              <Field\n                name=\"url\"\n                label=\"URL\"\n                id=\"bookmark-url\"\n                isRequired\n                render={(input) => <Input {...input} />}\n              />\n              <Field\n                name=\"description\"\n                label=\"Description\"\n                id=\"bookmark-description\"\n                render={(input) => <Textarea {...input} />}\n              />\n              <Field\n                name=\"tags\"\n                label=\"Tags\"\n                id=\"bookmark-tags\"\n                render={(input) => <Textarea {...input} />}\n              />\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"blue\" type=\"submit\">\n              Save\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Form>\n    </Modal>\n  );\n}\n\nexport function CreateBookmarkButton({\n  onBookmarkCreate,\n}: {\n  onBookmarkCreate: (bookmark: BookmarkType) => void;\n}) {\n  const { onClose, onOpen, isOpen } = useDisclosure();\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"Add bookmark\"\n        title=\"Add bookmark\"\n        icon={<AddIcon />}\n        onClick={onOpen}\n      />\n      <BookmarkForm\n        title=\"New bookmark\"\n        onClose={onClose}\n        isOpen={isOpen}\n        onSubmit={onBookmarkCreate}\n      />\n    </>\n  );\n}\n\nexport function EditBookmarkButton({\n  bookmark,\n  onBookmarkUpdate,\n}: {\n  bookmark: BookmarkType;\n  onBookmarkUpdate: (bookmark: BookmarkType) => void;\n}) {\n  const { onClose, onOpen, isOpen } = useDisclosure();\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"New bookmakr\"\n        icon={<EditIcon />}\n        onClick={onOpen}\n      />\n      <BookmarkForm\n        title=\"Edit bookmark\"\n        bookmark={bookmark}\n        onClose={onClose}\n        isOpen={isOpen}\n        onSubmit={onBookmarkUpdate}\n      />\n    </>\n  );\n}\n","import {\n  FormControl,\n  FormErrorIcon,\n  FormErrorMessage,\n  FormLabel,\n} from \"@chakra-ui/react\";\nimport React, { ReactNode } from \"react\";\nimport { Field as FinalField, Form as FinalForm } from \"react-final-form\";\n\nexport interface FormProps<T> {\n  initialValues: T;\n  validate?(values: T): Partial<Record<keyof T, string>>;\n  onSubmit(values: T): void;\n  children: ReactNode;\n}\n\ntype FilterStrings<UnionType> = UnionType extends string ? UnionType : never;\n\nexport interface FieldProps<\n  TValues,\n  TName extends FilterStrings<keyof TValues>,\n  TElement extends HTMLElement\n> {\n  name: TName;\n  isRequired?: boolean;\n  id?: string;\n  label: string;\n  render(input: FieldInputProps<TValues[TName], TElement>): ReactNode;\n}\n\ninterface FieldInputProps<FieldValue, ElementType extends HTMLElement> {\n  name: string;\n  onBlur: (event?: React.FocusEvent<ElementType>) => void;\n  onChange: (event: React.ChangeEvent<ElementType> | any) => void;\n  onFocus: (event?: React.FocusEvent<ElementType>) => void;\n  type?: string;\n  value: FieldValue;\n  checked?: boolean;\n  multiple?: boolean;\n}\n\nexport function createForm<FormValuesType>() {\n  function Form(props: FormProps<FormValuesType>) {\n    return (\n      <FinalForm<FormValuesType>\n        initialValues={props.initialValues}\n        onSubmit={props.onSubmit}\n        validate={props.validate}\n        render={({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>{props.children}</form>\n        )}\n      />\n    );\n  }\n\n  function Field<\n    TName extends FilterStrings<keyof FormValuesType>,\n    TElement extends HTMLElement = HTMLElement\n  >(props: FieldProps<FormValuesType, TName, TElement>) {\n    return (\n      <FinalField<FormValuesType[typeof props[\"name\"]]>\n        name={props.name}\n        render={({ input, meta }) => (\n          <FormControl\n            id={props.id}\n            isRequired={props.isRequired}\n            isInvalid={meta.touched && meta.error}\n          >\n            <FormLabel>{props.label}</FormLabel>\n            {props.render(input)}\n            <FormErrorMessage>\n              <FormErrorIcon /> {meta.error}\n            </FormErrorMessage>\n          </FormControl>\n        )}\n      />\n    );\n  }\n\n  return { Form, Field };\n}\n","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  IconButton,\n  Image as ChakraImage,\n  Link,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tag,\n  Text,\n  useDisclosure,\n  VStack,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { BookmarkId, BookmarkType } from \"./bookmark\";\nimport { EditBookmarkButton } from \"./BookmarkForm\";\n\nfunction useFaviconUrl(uri: string) {\n  return useMemo(() => {\n    try {\n      const url = new URL(uri);\n      return `${url.origin}/favicon.ico`;\n    } catch (ex) {\n      return null;\n    }\n  }, [uri]);\n}\n\nfunction Favicon({ url }: { url: string }) {\n  const [ready, setReady] = useState(false);\n  const image = useRef(new Image());\n\n  useEffect(() => {\n    let cancelled = false;\n    image.current.src = url;\n    image.current.onload = () => {\n      if (!cancelled) setReady(true);\n    };\n    return () => {\n      setReady(false);\n      cancelled = true;\n    };\n  }, [url]);\n\n  return (\n    <Box\n      background=\"gray.50\"\n      width=\"24px\"\n      height=\"24px\"\n      rounded=\"full\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <ChakraImage\n        boxSize=\"16px\"\n        src={url}\n        alt=\"Favicon\"\n        transition=\"opacity 0.2s ease-in\"\n        opacity={Number(ready)}\n      />\n    </Box>\n  );\n}\n\nexport function BookmarkView({\n  bookmark,\n  onBookmarkUpdate,\n  onBookmarkDelete,\n}: {\n  bookmark: BookmarkType;\n  onBookmarkUpdate: React.ComponentProps<\n    typeof EditBookmarkButton\n  >[\"onBookmarkUpdate\"];\n  onBookmarkDelete: (id: BookmarkId) => void;\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const faviconUrl = useFaviconUrl(bookmark.url);\n\n  return (\n    <Box border=\"1px\" borderColor=\"gray.200\" borderRadius={8} px={4} py={2}>\n      <Flex justify=\"space-between\">\n        <Box>\n          <Link isExternal href={bookmark.url}>\n            <Heading as=\"h3\" size=\"m\" display=\"flex\" alignItems=\"center\">\n              {faviconUrl && <Favicon url={faviconUrl} />}\n              <Box ml={faviconUrl ? 2 : 0}>{bookmark.name}</Box>\n            </Heading>\n          </Link>\n          <Text mb={1}>{bookmark.description}</Text>\n          <Wrap spacing={2}>\n            {bookmark.tags.map((tag) => (\n              <WrapItem key={tag}>\n                <Tag size=\"sm\">{tag}</Tag>\n              </WrapItem>\n            ))}\n          </Wrap>\n        </Box>\n        <VStack>\n          <EditBookmarkButton\n            bookmark={bookmark}\n            onBookmarkUpdate={onBookmarkUpdate}\n          />\n          <IconButton\n            aria-label=\"Delete bookmark\"\n            icon={<DeleteIcon />}\n            onClick={onOpen}\n          />\n        </VStack>\n      </Flex>\n      <Modal onClose={onClose} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Are you sure?</ModalHeader>\n          <ModalBody>\n            Deleting bookmark: <strong>{bookmark.name}</strong>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} mr={3}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              onClick={() => {\n                onBookmarkDelete(bookmark.id);\n                onClose();\n              }}\n            >\n              Delete\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}\n","import { BookmarkType } from \"../bookmark\";\n\nexport const APP_VERSION = 1;\n\nexport interface IStorageProvider {\n  getState(): Promise<AppState>;\n  setState(state: AppState): void;\n}\n\nexport interface AppState {\n  version: number;\n  bookmarks: BookmarkType[];\n}\n\nexport function getInitialState(version: number = APP_VERSION): AppState {\n  return {\n    version,\n    bookmarks: [],\n  };\n}\n\nexport interface IStorageManager {\n  getState(): Promise<AppState>;\n  setState(state: AppState): void;\n}\n\nexport function createStorageManager(\n  storageProvider: IStorageProvider\n): IStorageManager {\n  return {\n    async getState() {\n      try {\n        const stateFromStorage = await storageProvider.getState();\n        if (stateFromStorage.version !== APP_VERSION) {\n          const upgradedState = upgradeState(stateFromStorage);\n          storageProvider.setState(upgradedState);\n          return upgradedState;\n        }\n        return stateFromStorage;\n      } catch (ex) {\n        return getInitialState(APP_VERSION);\n      }\n    },\n    setState(state) {\n      storageProvider.setState(state);\n    },\n  };\n}\n\ntype StateUpdate = (state: AppState) => AppState;\n\nconst UPGRADES: Record<number, StateUpdate> = {\n  0: (state: AppState) => {\n    state.bookmarks.forEach((bookmark) => {\n      const date = new Date().toISOString();\n      bookmark.createdAt = bookmark.updatedAt = date;\n    });\n    state.version = 1;\n    return state;\n  },\n};\n\nexport function upgradeState(state: AppState): AppState {\n  while (state.version !== APP_VERSION) {\n    const version = Number(state.version ?? 0);\n    if (version in UPGRADES) {\n      state = UPGRADES[version](state);\n    } else {\n      state = getInitialState(APP_VERSION);\n    }\n  }\n  return state;\n}\n","import { fileOpen, fileSave, FileSystemHandle } from \"browser-nativefs\";\nimport { get as idbGet, set as idbSet } from \"idb-keyval\";\n\nimport { AppState, upgradeState } from \"./index\";\n\nconst IDB_FILE_HANDLE_KEY = \"idb_file_handle_key\";\n\nexport async function saveFileHandle(handle: FileSystemHandle): Promise<void> {\n  await idbSet(IDB_FILE_HANDLE_KEY, handle);\n}\n\nexport function restoreFileHandle(): Promise<FileSystemHandle | undefined> {\n  return idbGet(IDB_FILE_HANDLE_KEY);\n}\n\nexport async function saveToFile(\n  state: AppState,\n  name: string = \"Untitled\",\n  handle?: FileSystemHandle\n) {\n  const blob = new Blob([JSON.stringify(state)], {\n    type: \"application/json\",\n  });\n  const fileHandle = await fileSave(\n    blob,\n    {\n      fileName: name,\n      description: \"My bookmarks file\",\n      extensions: [\".mbms\"],\n    },\n    handle\n  );\n  return { fileHandle };\n}\n\nexport type LoadedFile = {\n  state: AppState;\n  name: string;\n  handle?: FileSystemHandle;\n};\n\nexport async function loadFromFile() {\n  const blob = await fileOpen({\n    description: \"My bookmarks file\",\n    extensions: [\".mbms\"],\n  });\n  return {\n    state: upgradeState(JSON.parse(await blob.text())),\n    name: blob.name,\n    handle: blob.handle,\n  };\n}\n","import { Icon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Checkbox,\n  Collapse,\n  Container,\n  Heading,\n  HStack,\n  Input,\n  Link,\n  Text,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { FileSystemHandle } from \"browser-nativefs\";\nimport { matchSorter } from \"match-sorter\";\nimport { useEffect, useMemo, useReducer, useState } from \"react\";\nimport {\n  AiFillFileAdd,\n  AiFillFileText,\n  AiOutlineDownload,\n} from \"react-icons/ai\";\nimport { GoMarkGithub } from \"react-icons/go\";\n\nimport { BookmarkId, BookmarkType } from \"./bookmark\";\nimport { CreateBookmarkButton } from \"./BookmarkForm\";\nimport { BookmarkView } from \"./BookmarkView\";\nimport { IconButton } from \"./IconButton\";\nimport { AppState } from \"./storage\";\nimport {\n  loadFromFile,\n  saveFileHandle,\n  saveToFile,\n} from \"./storage/file-system-storage\";\n\ntype AppAction =\n  | { type: \"NewBookmark\"; payload: BookmarkType }\n  | { type: \"UpdateBookmark\"; payload: BookmarkType }\n  | { type: \"DeleteBookmark\"; payload: BookmarkId }\n  | { type: \"SetState\"; payload: AppState }\n  | { type: \"CreateNewFile\" };\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case \"NewBookmark\":\n      return {\n        ...state,\n        bookmarks: state.bookmarks.concat(action.payload),\n      };\n    case \"UpdateBookmark\": {\n      const updatedBookmarkIndex = state.bookmarks.findIndex(\n        (b) => b.id === action.payload.id\n      );\n      const updatedBookmarks: BookmarkType[] = [\n        ...state.bookmarks.slice(0, updatedBookmarkIndex),\n        action.payload,\n        ...state.bookmarks.slice(updatedBookmarkIndex + 1),\n      ];\n      return {\n        ...state,\n        bookmarks: updatedBookmarks,\n      };\n    }\n    case \"DeleteBookmark\":\n      return {\n        ...state,\n        bookmarks: state.bookmarks.filter((b) => b.id !== action.payload),\n      };\n    case \"SetState\":\n      return action.payload;\n    case \"CreateNewFile\":\n      return {\n        ...state,\n        bookmarks: [],\n      };\n  }\n}\n\nfunction App({\n  initialState,\n  initialFileHandle,\n  onStateChange,\n}: {\n  initialState: AppState;\n  initialFileHandle: FileSystemHandle | undefined;\n  onStateChange(state: AppState): void;\n}) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [filter, setFilterValue] = useState(\"\");\n  const [fileHandle, setFileHandle] = useState(initialFileHandle);\n  const [autoSaveIsEnabled, setAutoSaveEnabled] = useState(false);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      onStateChange(state);\n    }, 100);\n    return () => clearTimeout(id);\n  }, [onStateChange, state]);\n\n  useEffect(() => {\n    if (autoSaveIsEnabled) {\n      saveToFile(state, fileHandle?.name, fileHandle).catch((ex) => {\n        if (ex.code !== DOMException.ABORT_ERR) {\n          toast({\n            title: \"Error\",\n            description: ex.message,\n            status: \"error\",\n            isClosable: true,\n          });\n        }\n      });\n    }\n  }, [autoSaveIsEnabled, fileHandle, state, toast]);\n\n  const { bookmarks } = state;\n  const sortedBookmarks = useMemo(\n    () =>\n      matchSorter(\n        bookmarks.slice().sort((a, b) => (a.updatedAt < b.updatedAt ? -1 : 1)),\n        filter,\n        { keys: [\"name\", \"tags\", \"description\"] }\n      ),\n    [filter, bookmarks]\n  );\n\n  async function handleFileOpen() {\n    try {\n      const file = await loadFromFile();\n      setFileHandle(file.handle);\n      if (file.handle) {\n        saveFileHandle(file.handle);\n      }\n      dispatch({ type: \"SetState\", payload: file.state });\n    } catch (ex) {\n      if (ex.code !== DOMException.ABORT_ERR) {\n        toast({\n          title: \"Error\",\n          description: ex.message,\n          status: \"error\",\n          isClosable: true,\n        });\n      }\n    }\n  }\n\n  async function handleFileSave() {\n    try {\n      const result = await saveToFile(state, fileHandle?.name, fileHandle);\n      setFileHandle(result.fileHandle);\n      toast({\n        title: \"Saved\",\n        description: \"Bookmarks saved to \" + result.fileHandle.name,\n        status: \"success\",\n        duration: 2000,\n        isClosable: true,\n      });\n    } catch (ex) {\n      if (ex.code !== DOMException.ABORT_ERR) {\n        toast({\n          title: \"Error\",\n          description: ex.message,\n          status: \"error\",\n          isClosable: true,\n        });\n      }\n    }\n  }\n\n  async function handleNewFile() {\n    try {\n      const result = await saveToFile({ ...state, bookmarks: [] });\n      dispatch({ type: \"CreateNewFile\" });\n      setFileHandle(result.fileHandle);\n      saveFileHandle(result.fileHandle);\n      setAutoSaveEnabled(false);\n      toast({\n        title: \"New file created\",\n        description: `New file \"${result.fileHandle.name}\" created`,\n        status: \"success\",\n        duration: 2000,\n        isClosable: true,\n      });\n    } catch (ex) {\n      if (ex.code !== DOMException.ABORT_ERR) {\n        toast({\n          title: \"Failed to create a new file\",\n          description: ex.message,\n          status: \"error\",\n          isClosable: true,\n        });\n      }\n    }\n  }\n\n  return (\n    <Container py={8}>\n      <Box\n        as=\"header\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        mb={2}\n      >\n        <Heading as=\"h1\">My bookmarks.</Heading>\n        <HStack>\n          <IconButton\n            aria-label=\"New file\"\n            title=\"New file\"\n            icon={<Icon as={AiFillFileAdd} />}\n            onClick={handleNewFile}\n          />\n          <IconButton\n            aria-label=\"Open file\"\n            title=\"Open file\"\n            icon={<Icon as={AiFillFileText} />}\n            onClick={handleFileOpen}\n          />\n          <IconButton\n            aria-label=\"Save to file\"\n            title=\"Save to file\"\n            icon={<Icon as={AiOutlineDownload} />}\n            onClick={handleFileSave}\n          />\n        </HStack>\n      </Box>\n      <Collapse in={Boolean(fileHandle)} animateOpacity>\n        {fileHandle && (\n          <Box display=\"flex\" justifyContent=\"space-between\" pb={2}>\n            <Text>{fileHandle.name}</Text>\n            <Checkbox\n              checked={autoSaveIsEnabled}\n              onChange={(e) => setAutoSaveEnabled(e.target.checked)}\n            >\n              Autosave\n            </Checkbox>\n          </Box>\n        )}\n      </Collapse>\n      <HStack>\n        <Input\n          placeholder=\"Search\"\n          value={filter}\n          onChange={(e) => setFilterValue(e.target.value)}\n          mb={8}\n          mt={8}\n        />\n\n        <CreateBookmarkButton\n          onBookmarkCreate={(bookmark) => {\n            dispatch({ type: \"NewBookmark\", payload: bookmark });\n          }}\n        />\n      </HStack>\n      {sortedBookmarks.length === 0 && (\n        <Box textAlign=\"center\" color=\"gray.500\">\n          No bookmarks yet. Let's add the first bookmark!\n        </Box>\n      )}\n      <VStack spacing={4} align=\"stretch\">\n        {sortedBookmarks.map((bookmark) => (\n          <BookmarkView\n            key={bookmark.id}\n            bookmark={bookmark}\n            onBookmarkUpdate={(bookmark) =>\n              dispatch({ type: \"UpdateBookmark\", payload: bookmark })\n            }\n            onBookmarkDelete={(id) =>\n              dispatch({ type: \"DeleteBookmark\", payload: id })\n            }\n          />\n        ))}\n      </VStack>\n      <Box as=\"footer\" mt={10} display=\"flex\" justifyContent=\"flex-end\">\n        <Link\n          href=\"https://github.com/nanot1m/my-bookmarks-app\"\n          isExternal\n          color=\"gray.500\"\n        >\n          <Icon as={GoMarkGithub} /> nanot1m\n        </Link>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { APP_VERSION, getInitialState, IStorageProvider } from \"./index\";\n\nconst LS_KEY = \"MyBookmarksAppState\";\n\nexport const localStorageProvider: IStorageProvider = {\n  async getState() {\n    const strState = localStorage.getItem(LS_KEY);\n    return strState ? JSON.parse(strState) : getInitialState(APP_VERSION);\n  },\n  setState(state) {\n    localStorage.setItem(LS_KEY, JSON.stringify(state));\n  },\n};\n","import { ChakraProvider, ColorModeScript, extendTheme } from \"@chakra-ui/react\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport { createBookmark } from \"./bookmark\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { APP_VERSION, createStorageManager, getInitialState } from \"./storage\";\nimport { restoreFileHandle } from \"./storage/file-system-storage\";\nimport { localStorageProvider } from \"./storage/local-storage\";\n\nconst storageManager = createStorageManager(localStorageProvider);\n\nasync function restoreAppState() {\n  const [fileHandle, state] = await Promise.all([\n    restoreFileHandle(),\n    storageManager.getState(),\n  ]);\n  return {\n    state,\n    fileHandle,\n  };\n}\n\nrestoreAppState().then(({ state, fileHandle }) => {\n  const customTheme = extendTheme({\n    config: {\n      useSystemColorMode: true,\n    },\n  });\n\n  ReactDOM.render(\n    <StrictMode>\n      <ColorModeScript />\n      <ChakraProvider theme={customTheme}>\n        <App\n          initialState={state}\n          initialFileHandle={fileHandle}\n          onStateChange={storageManager.setState}\n        />\n      </ChakraProvider>\n    </StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n\ndeclare global {\n  interface Window {\n    setTestBookmarks(): void;\n  }\n}\n\nwindow.setTestBookmarks = function () {\n  const myBookmarks = [\n    createBookmark({\n      name: \"google\",\n      url: \"https://www.google.com\",\n      description: \"big search engine\",\n      tags: [\"google\", \"search\"],\n    }),\n    createBookmark({\n      name: \"instagram\",\n      url: \"https://www.instagram.com/\",\n      description: \"share photoes and videos\",\n      tags: [\"photo\", \"video\", \"image\", \"social\", \"media\"],\n    }),\n    createBookmark({\n      name: \"youtube\",\n      url: \"https://www.youtube.com\",\n      tags: [\"google\", \"video\"],\n    }),\n  ];\n\n  localStorageProvider.setState({\n    ...getInitialState(APP_VERSION),\n    bookmarks: myBookmarks,\n  });\n  window.location.reload();\n};\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}