{"version":3,"sources":["collection/index.ts","bookmark/index.ts","form/index.tsx","BookmarkForm.tsx","BookmarkView.tsx","storage/index.ts","storage/file-system-storage.ts","App.tsx","reportWebVitals.ts","storage/local-storage.ts","index.tsx"],"names":["unique","map","xs","memo","Set","x","has","add","f","fn","createBookmark","name","url","description","tags","date","Date","toISOString","id","nanoid","toLowerCase","Array","from","createdAt","updatedAt","Form","props","initialValues","onSubmit","validate","render","handleSubmit","children","Field","input","meta","isRequired","isInvalid","touched","error","label","validateNewBookmarkForm","form","errors","trim","length","BookmarkForm","title","bookmark","isOpen","onClose","initialFocusRef","useRef","values","payload","split","filter","Boolean","join","ref","mr","onClick","colorScheme","type","CreateBookmarkButton","onBookmarkCreate","useDisclosure","onOpen","aria-label","icon","Add","EditBookmarkButton","onBookmarkUpdate","Edit","BookmarkView","onBookmarkDelete","border","borderColor","borderRadius","px","py","justify","isExternal","href","as","size","mb","tag","Delete","getInitialState","version","bookmarks","UPGRADES","0","state","forEach","upgradeState","Number","a","handle","blob","Blob","JSON","stringify","fileSave","fileName","extensions","fileHandle","fileOpen","text","parse","appReducer","action","concat","updatedBookmarkIndex","findIndex","b","updatedBookmarks","slice","App","storageProvider","initialState","onStateChange","useReducer","dispatch","useState","setFilterValue","setFileName","setFileHandle","toast","useToast","useEffect","setTimeout","clearTimeout","sorted","useMemo","matchSorter","sort","keys","display","justifyContent","alignItems","FaFileAlt","loadFromFile","then","file","FaFileDownload","saveToFile","status","duration","isClosable","ex","message","color","placeholder","value","onChange","e","target","spacing","align","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LS_KEY","localStorageProvider","getState","strState","localStorage","getItem","setState","setItem","storageManager","stateFromStorage","upgradedState","customTheme","extendTheme","config","useSystemColorMode","ReactDOM","theme","document","getElementById","window","setTestBookmarks","myBookmarks","location","reload"],"mappings":"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","file":"static/js/main.329f694b.chunk.js","sourcesContent":["export function* unique<T>(xs: Iterable<T>): Iterable<T> {\n  const memo = new Set();\n  for (const x of xs) {\n    if (memo.has(x)) {\n      continue;\n    }\n    yield x;\n    memo.add(x);\n  }\n}\n\nexport function* map<T, R>(fn: (x: T) => R, xs: Iterable<T>): Iterable<R> {\n  for (const x of xs) {\n    yield fn(x);\n  }\n}\n\nexport function toArray<T>(xs: Iterable<T>): Array<T> {\n  return Array.from(xs);\n}\n","import { nanoid } from \"nanoid\";\nimport { map, toArray, unique } from \"../collection\";\n\nexport type BookmarkId = string & { __type__: \"BookmarkId\" };\nfunction getBookmarkId() {\n  return nanoid() as BookmarkId;\n}\n\nexport type BookmarkType = {\n  id: BookmarkId;\n  name: string;\n  url: string;\n  description: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateBookmarkPayload = {\n  name: string;\n  url: string;\n  description?: string;\n  tags?: string[];\n};\n\nexport function createBookmark({\n  name,\n  url,\n  description = \"\",\n  tags = [],\n}: CreateBookmarkPayload): BookmarkType {\n  const date = new Date().toISOString();\n  return {\n    id: getBookmarkId(),\n    url,\n    name,\n    description,\n    tags: toArray(unique(map((x) => x.toLowerCase(), tags))),\n    createdAt: date,\n    updatedAt: date,\n  };\n}\n\nexport function updateBookmark(\n  bookmark: BookmarkType,\n  updates: Omit<Partial<BookmarkType>, \"id\" | \"createdAt\" | \"updatedAt\">\n) {\n  return {\n    ...bookmark,\n    ...updates,\n    updatedAt: new Date().toISOString(),\n  };\n}\n","import { Form as FinalForm, Field as FinalField } from \"react-final-form\";\nimport React, { ReactNode } from \"react\";\nimport {\n  FormControl,\n  FormErrorIcon,\n  FormErrorMessage,\n  FormLabel,\n} from \"@chakra-ui/react\";\n\nexport interface FormProps<T> {\n  initialValues: T;\n  validate?(values: T): Partial<Record<keyof T, string>>;\n  onSubmit(values: T): void;\n  children: ReactNode;\n}\n\ntype FilterStrings<T> = T extends string ? T : never;\n\nexport interface FieldProps<\n  TValues,\n  TName extends FilterStrings<keyof TValues>,\n  TElement extends HTMLElement\n> {\n  name: TName;\n  isRequired?: boolean;\n  id?: string;\n  label: string;\n  render(input: FieldInputProps<TValues[TName], TElement>): ReactNode;\n}\n\ninterface FieldInputProps<FieldValue, T extends HTMLElement> {\n  name: string;\n  onBlur: (event?: React.FocusEvent<T>) => void;\n  onChange: (event: React.ChangeEvent<T> | any) => void;\n  onFocus: (event?: React.FocusEvent<T>) => void;\n  type?: string;\n  value: FieldValue;\n  checked?: boolean;\n  multiple?: boolean;\n}\n\nexport function createForm<T>() {\n  function Form(props: FormProps<T>) {\n    return (\n      <FinalForm<T>\n        initialValues={props.initialValues}\n        onSubmit={props.onSubmit}\n        validate={props.validate}\n        render={({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>{props.children}</form>\n        )}\n      />\n    );\n  }\n\n  function Field<\n    TName extends FilterStrings<keyof T>,\n    TElement extends HTMLElement = HTMLElement\n  >(props: FieldProps<T, TName, TElement>) {\n    return (\n      <FinalField<T[typeof props[\"name\"]]>\n        name={props.name}\n        render={({ input, meta }) => (\n          <FormControl\n            id={props.id}\n            isRequired={props.isRequired}\n            isInvalid={meta.touched && meta.error}\n          >\n            <FormLabel>{props.label}</FormLabel>\n            {props.render(input)}\n            <FormErrorMessage>\n              <FormErrorIcon /> {meta.error}\n            </FormErrorMessage>\n          </FormControl>\n        )}\n      />\n    );\n  }\n\n  return { Form, Field };\n}\n","import {\n  Button,\n  IconButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Textarea,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { AddIcon, EditIcon } from \"@chakra-ui/icons\";\nimport React, { useRef } from \"react\";\nimport { BookmarkType, createBookmark } from \"./bookmark\";\nimport { createForm } from \"./form\";\n\ntype CreateBookmarkFormPayload = {\n  name: string;\n  url: string;\n  description: string;\n  tags: string;\n};\n\nconst { Form, Field } = createForm<CreateBookmarkFormPayload>();\n\nconst validateNewBookmarkForm = (\n  form: CreateBookmarkFormPayload\n): Partial<Record<\"name\" | \"url\" | \"description\" | \"tags\", string>> => {\n  const errors = {} as Partial<Record<keyof typeof form, string>>;\n  if ((form.name?.trim() || \"\").length === 0) {\n    errors.name = \"Name can not be empty\";\n  }\n  if ((form.url?.trim() || \"\").length === 0) {\n    errors.url = \"URL can not be empty\";\n  }\n  return errors;\n};\n\nexport function BookmarkForm({\n  title,\n  bookmark,\n  isOpen,\n  onClose,\n  onSubmit,\n}: {\n  title: string;\n  bookmark?: BookmarkType;\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (bookmark: BookmarkType) => void;\n}) {\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <Form\n        onSubmit={(values) => {\n          const payload = {\n            name: values.name,\n            description: values.description,\n            url: values.url,\n            tags: values.tags.split(/[\\s,]+/).filter(Boolean),\n          };\n          onSubmit(\n            bookmark ? { ...bookmark, ...payload } : createBookmark(payload)\n          );\n          onClose();\n        }}\n        initialValues={{\n          description: bookmark?.description ?? \"\",\n          name: bookmark?.name ?? \"\",\n          tags: bookmark?.tags.join(\", \") ?? \"\",\n          url: bookmark?.url ?? \"\",\n        }}\n        validate={validateNewBookmarkForm}\n      >\n        <ModalContent>\n          <ModalHeader>{title}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack>\n              <Field\n                name=\"name\"\n                label=\"Name\"\n                id=\"bookmark-name\"\n                isRequired\n                render={(input) => <Input ref={initialFocusRef} {...input} />}\n              />\n              <Field\n                name=\"url\"\n                label=\"URL\"\n                id=\"bookmark-url\"\n                isRequired\n                render={(input) => <Input {...input} />}\n              />\n              <Field\n                name=\"description\"\n                label=\"Description\"\n                id=\"bookmark-description\"\n                render={(input) => <Textarea {...input} />}\n              />\n              <Field\n                name=\"tags\"\n                label=\"Tags\"\n                id=\"bookmark-tags\"\n                render={(input) => <Textarea {...input} />}\n              />\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"blue\" type=\"submit\">\n              Save\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Form>\n    </Modal>\n  );\n}\n\nexport function CreateBookmarkButton({\n  onBookmarkCreate,\n}: {\n  onBookmarkCreate: (bookmark: BookmarkType) => void;\n}) {\n  const { onClose, onOpen, isOpen } = useDisclosure();\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"New bookmakr\"\n        icon={<AddIcon />}\n        onClick={onOpen}\n      />\n\n      <BookmarkForm\n        title=\"New bookmark\"\n        onClose={onClose}\n        isOpen={isOpen}\n        onSubmit={onBookmarkCreate}\n      />\n    </>\n  );\n}\n\nexport function EditBookmarkButton({\n  bookmark,\n  onBookmarkUpdate,\n}: {\n  bookmark: BookmarkType;\n  onBookmarkUpdate: (bookmark: BookmarkType) => void;\n}) {\n  const { onClose, onOpen, isOpen } = useDisclosure();\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"New bookmakr\"\n        icon={<EditIcon />}\n        onClick={onOpen}\n      />\n      <BookmarkForm\n        title=\"Edit bookmark\"\n        bookmark={bookmark}\n        onClose={onClose}\n        isOpen={isOpen}\n        onSubmit={onBookmarkUpdate}\n      />\n    </>\n  );\n}\n","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  HStack,\n  IconButton,\n  Link,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tag,\n  Text,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { BookmarkId, BookmarkType } from \"./bookmark\";\nimport { EditBookmarkButton } from \"./BookmarkForm\";\n\nexport function BookmarkView({\n  bookmark,\n  onBookmarkUpdate,\n  onBookmarkDelete,\n}: {\n  bookmark: BookmarkType;\n  onBookmarkUpdate: React.ComponentProps<\n    typeof EditBookmarkButton\n  >[\"onBookmarkUpdate\"];\n  onBookmarkDelete: (id: BookmarkId) => void;\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box border=\"1px\" borderColor=\"gray.200\" borderRadius={8} px={4} py={2}>\n      <Flex justify=\"space-between\">\n        <Box>\n          <Link isExternal href={bookmark.url}>\n            <Heading as=\"h3\" size=\"m\">\n              {bookmark.name}\n            </Heading>\n          </Link>\n          <Text mb={1}>{bookmark.description}</Text>\n          <HStack>\n            {bookmark.tags.map((tag) => (\n              <Tag key={tag} size=\"sm\">\n                {tag}\n              </Tag>\n            ))}\n          </HStack>\n        </Box>\n        <VStack>\n          <EditBookmarkButton\n            bookmark={bookmark}\n            onBookmarkUpdate={onBookmarkUpdate}\n          />\n          <IconButton\n            aria-label=\"Delete bookmark\"\n            icon={<DeleteIcon />}\n            onClick={onOpen}\n          />\n        </VStack>\n      </Flex>\n      <Modal onClose={onClose} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Are you sure?</ModalHeader>\n          <ModalBody>\n            Deleting bookmark: <strong>{bookmark.name}</strong>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} mr={3}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              onClick={() => {\n                onBookmarkDelete(bookmark.id);\n                onClose();\n              }}\n            >\n              Delete\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}\n","import { BookmarkType } from \"../bookmark\";\n\nexport const APP_VERSION = 1;\n\nexport interface IStorageProvider {\n  getState(): Promise<AppState>;\n  setState(state: AppState): void;\n}\n\nexport interface AppState {\n  version: number;\n  bookmarks: BookmarkType[];\n}\n\nexport function getInitialState(version: number = APP_VERSION): AppState {\n  return {\n    version,\n    bookmarks: [],\n  };\n}\n\nexport interface IStorageManager {\n  getState(): Promise<AppState>;\n  setState(state: AppState): void;\n}\n\nexport function createStorageManager(\n  storageProvider: IStorageProvider\n): IStorageManager {\n  return {\n    async getState() {\n      try {\n        const stateFromStorage = await storageProvider.getState();\n        if (stateFromStorage.version !== APP_VERSION) {\n          const upgradedState = upgradeState(stateFromStorage);\n          storageProvider.setState(upgradedState);\n          return upgradedState;\n        }\n        return stateFromStorage;\n      } catch (ex) {\n        return getInitialState(APP_VERSION);\n      }\n    },\n    setState(state) {\n      storageProvider.setState(state);\n    },\n  };\n}\n\ntype StateUpdate = (state: AppState) => AppState;\n\nconst UPGRADES: Record<number, StateUpdate> = {\n  0: (state: AppState) => {\n    state.bookmarks.forEach((bookmark) => {\n      const date = new Date().toISOString();\n      bookmark.createdAt = bookmark.updatedAt = date;\n    });\n    state.version = 1;\n    return state;\n  },\n};\n\nexport function upgradeState(state: AppState): AppState {\n  while (state.version !== APP_VERSION) {\n    const version = Number(state.version ?? 0);\n    if (version in UPGRADES) {\n      state = UPGRADES[version](state);\n    } else {\n      state = getInitialState(APP_VERSION);\n    }\n  }\n  return state;\n}\n","import { fileSave, fileOpen, FileSystemHandle } from \"browser-nativefs\";\nimport { AppState, upgradeState } from \"./index\";\n\nexport async function saveToFile(\n  state: AppState,\n  name: string = \"Untitled\",\n  handle?: FileSystemHandle\n) {\n  const blob = new Blob([JSON.stringify(state)], {\n    type: \"application/json\",\n  });\n  const fileHandle = await fileSave(\n    blob,\n    {\n      fileName: name,\n      description: \"My bookmarks file\",\n      extensions: [\".mbms\"],\n    },\n    handle\n  );\n  return { fileHandle };\n}\n\nexport type LoadedFile = {\n  state: AppState;\n  name: string;\n  handle?: FileSystemHandle;\n};\n\nexport async function loadFromFile() {\n  const blob = await fileOpen({\n    description: \"My bookmarks file\",\n    extensions: [\".mbms\"],\n  });\n  return {\n    state: upgradeState(JSON.parse(await blob.text())),\n    name: blob.name,\n    handle: blob.handle,\n  };\n}\n","import {\n  Box,\n  Container,\n  Heading,\n  HStack,\n  IconButton,\n  Input,\n  Text,\n  VStack,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { Icon } from \"@chakra-ui/icons\";\nimport { FaFileAlt, FaFileDownload } from \"react-icons/fa\";\nimport { matchSorter } from \"match-sorter\";\nimport React, { useEffect, useMemo, useReducer, useState } from \"react\";\nimport { BookmarkId, BookmarkType } from \"./bookmark\";\nimport { AppState } from \"./storage\";\nimport { BookmarkView } from \"./BookmarkView\";\nimport { CreateBookmarkButton } from \"./BookmarkForm\";\nimport { FileSystemHandle } from \"browser-nativefs\";\nimport { loadFromFile, saveToFile } from \"./storage/file-system-storage\";\n\ntype AppAction =\n  | { type: \"NewBookmark\"; payload: BookmarkType }\n  | { type: \"UpdateBookmark\"; payload: BookmarkType }\n  | { type: \"DeleteBookmark\"; payload: BookmarkId }\n  | { type: \"SetState\"; payload: AppState };\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case \"NewBookmark\":\n      return {\n        ...state,\n        bookmarks: state.bookmarks.concat(action.payload),\n      };\n    case \"UpdateBookmark\": {\n      const updatedBookmarkIndex = state.bookmarks.findIndex(\n        (b) => b.id === action.payload.id\n      );\n      const updatedBookmarks: BookmarkType[] = [\n        ...state.bookmarks.slice(0, updatedBookmarkIndex),\n        action.payload,\n        ...state.bookmarks.slice(updatedBookmarkIndex + 1),\n      ];\n      return {\n        ...state,\n        bookmarks: updatedBookmarks,\n      };\n    }\n    case \"DeleteBookmark\":\n      return {\n        ...state,\n        bookmarks: state.bookmarks.filter((b) => b.id !== action.payload),\n      };\n    case \"SetState\":\n      return action.payload;\n  }\n}\n\nfunction App({\n  initialState,\n  onStateChange,\n}: {\n  initialState: AppState;\n  onStateChange(state: AppState): void;\n}) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [filter, setFilterValue] = useState(\"\");\n  const [fileName, setFileName] = useState<string>();\n  const [fileHandle, setFileHandle] = useState<FileSystemHandle>();\n  const toast = useToast();\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      onStateChange(state);\n    }, 100);\n    return () => clearTimeout(id);\n  }, [onStateChange, state]);\n\n  const { bookmarks } = state;\n  const sorted = useMemo(\n    () =>\n      matchSorter(\n        bookmarks.slice().sort((a, b) => (a.updatedAt < b.updatedAt ? -1 : 1)),\n        filter,\n        { keys: [\"name\", \"tags\", \"description\"] }\n      ),\n    [filter, bookmarks]\n  );\n\n  return (\n    <Container py={8}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Heading as=\"h1\">My bookmarks.</Heading>\n        <HStack>\n          <IconButton\n            aria-label=\"Open file\"\n            title=\"Open file\"\n            icon={<Icon as={FaFileAlt} />}\n            onClick={() =>\n              loadFromFile().then((file) => {\n                setFileName(file.name);\n                setFileHandle(file.handle);\n                dispatch({ type: \"SetState\", payload: file.state });\n              })\n            }\n          />\n          <IconButton\n            aria-label=\"Save to file\"\n            title=\"Save to file\"\n            icon={<Icon as={FaFileDownload} />}\n            onClick={() =>\n              saveToFile(state, fileName, fileHandle).then(\n                ({ fileHandle }) => {\n                  setFileName(fileHandle.name);\n                  setFileHandle(fileHandle);\n                  toast({\n                    title: \"Saved\",\n                    description: \"Bookmarks saved to \" + fileHandle.name,\n                    status: \"success\",\n                    duration: 2000,\n                    isClosable: true,\n                  });\n                },\n                (ex) => {\n                  toast({\n                    title: \"Error\",\n                    description: ex.message,\n                    status: \"error\",\n                    isClosable: true,\n                  });\n                }\n              )\n            }\n          />\n          <CreateBookmarkButton\n            onBookmarkCreate={(bookmark) => {\n              dispatch({ type: \"NewBookmark\", payload: bookmark });\n            }}\n          />\n        </HStack>\n      </Box>\n      <Box mb={10}>\n        <Text color=\"gray.500\">{fileName}</Text>\n      </Box>\n      <Input\n        placeholder=\"Search\"\n        value={filter}\n        onChange={(e) => setFilterValue(e.target.value)}\n        mb={8}\n      />\n      <VStack spacing={4} align=\"stretch\">\n        {sorted.map((bookmark) => (\n          <BookmarkView\n            key={bookmark.id}\n            bookmark={bookmark}\n            onBookmarkUpdate={(bookmark) =>\n              dispatch({ type: \"UpdateBookmark\", payload: bookmark })\n            }\n            onBookmarkDelete={(id) =>\n              dispatch({ type: \"DeleteBookmark\", payload: id })\n            }\n          />\n        ))}\n      </VStack>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { APP_VERSION, getInitialState, IStorageProvider } from \"./index\";\n\nconst LS_KEY = \"MyBookmarksAppState\";\n\nexport const localStorageProvider: IStorageProvider = {\n  async getState() {\n    const strState = localStorage.getItem(LS_KEY);\n    return strState ? JSON.parse(strState) : getInitialState(APP_VERSION);\n  },\n  setState(state) {\n    localStorage.setItem(LS_KEY, JSON.stringify(state));\n  },\n};\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, ColorModeScript, extendTheme } from \"@chakra-ui/react\";\nimport { localStorageProvider } from \"./storage/local-storage\";\nimport { createBookmark } from \"./bookmark\";\nimport { APP_VERSION, createStorageManager, getInitialState } from \"./storage\";\n\nconst storageManager = createStorageManager(localStorageProvider);\n\nstorageManager.getState().then((state) => {\n  const customTheme = extendTheme({\n    config: {\n      useSystemColorMode: true,\n    },\n  });\n\n  ReactDOM.render(\n    <StrictMode>\n      <ColorModeScript />\n      <ChakraProvider theme={customTheme}>\n        <App initialState={state} onStateChange={storageManager.setState} />\n      </ChakraProvider>\n    </StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n\ndeclare global {\n  interface Window {\n    setTestBookmarks(): void;\n  }\n}\n\nwindow.setTestBookmarks = function () {\n  const myBookmarks = [\n    createBookmark({\n      name: \"google\",\n      url: \"https://www.google.com\",\n      description: \"big search engine\",\n      tags: [\"google\", \"search\"],\n    }),\n    createBookmark({\n      name: \"instagram\",\n      url: \"https://www.instagram.com/\",\n      description: \"share photoes and videos\",\n      tags: [\"photo\", \"video\", \"image\", \"social\", \"media\"],\n    }),\n    createBookmark({\n      name: \"youtube\",\n      url: \"https://www.youtube.com\",\n      tags: [\"google\", \"video\"],\n    }),\n  ];\n\n  localStorageProvider.setState({\n    ...getInitialState(APP_VERSION),\n    bookmarks: myBookmarks,\n  });\n  window.location.reload();\n};\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}